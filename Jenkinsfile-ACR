pipeline {
    agent any 

     options {
        timeout(time: 10, unit: 'MINUTES')
     }
    environment {
    ACR_NAME = "liliacr"
    ACR_LOGIN_SERVER = "liliacr.azurecr.io"
    IMAGE_NAME = "node-express-app"
    }
    stages { 
        stage('SCM Checkout') {
            steps{
           git branch: 'main', url: 'https://github.com/lily4499/dockerize-amazon.git'
            }
        }
        // run sonarqube test
        stage('Run Sonarqube') {
            environment {
                scannerHome = tool 'ibt-sonarqube';
            }
            steps {
              withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=may17_cohort"
              }
            }
        }
       // Building Docker Image 
       stage ('Build Docker image') {
        steps {
                script {
                    //dockerImage = docker.build registryUrl
                 def dockerImage = docker.build("${ACR_NAME}.azurecr.io/${IMAGE_NAME}:$BUILD_NUMBER", '.') 
                }
            }
       }

	stage('Trivy Scan (Aqua)') {
            steps {
                sh 'trivy image ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:$BUILD_NUMBER'
            }
       }

    // Uploading Docker images into ACR
        stage('Upload Image to ACR') {
         steps{   
             script {
               withCredentials([usernamePassword(credentialsId: 'lilip-acr-credentials-id', usernameVariable: 'SERVICE_PRINCIPAL_ID', passwordVariable: 'SERVICE_PRINCIPAL_PASSWORD')]) {
		   sh "docker login ${ACR_LOGIN_SERVER} -u $SERVICE_PRINCIPAL_ID -p $SERVICE_PRINCIPAL_PASSWORD"
             	   sh " docker push ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:$BUILD_NUMBER"
                  }
              }
         }
      }
   }
}
