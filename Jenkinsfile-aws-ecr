pipeline {
    agent any
    environment {
        AWS_CREDENTIALS = 'aws-credentials'  // Replace with your Jenkins AWS credentials ID
        ECR_REPO_URI = '637423529262.dkr.ecr.us-east-1.amazonaws.com/my-app-repo'  // Replace with your ECR URI
        IMAGE_TAG = "${ECR_REPO_URI}:${BUILD_NUMBER}"
        AWS_REGION = 'us-east-1'  // Replace with your AWS region
        NAMESPACE = 'default'  // Set the Kubernetes namespace
    }
    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning Git repository...'
                git branch: 'main', url: 'https://github.com/lily4499/node-express-docker.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh 'docker build -t $IMAGE_TAG .'
            }
        }
        stage('Login to AWS ECR') {
            steps {
                echo 'Logging in to AWS ECR...'
                withCredentials([usernamePassword(credentialsId: "$AWS_CREDENTIALS", usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URI'
                }
            }
        }
        stage('Push Docker Image to ECR') {
            steps {
                echo 'Pushing Docker image to ECR...'
                sh 'docker push $IMAGE_TAG'
            }
        }
        stage('Update Deployment File') {
            steps {
                echo 'Updating deployment.yaml with the new image tag...'
                // Replace the image tag in deployment.yaml with the current IMAGE_TAG
                sh '''
                   sed -i "s|image:.*|image: $IMAGE_TAG|" eks/deployment.yaml
                '''
            }
        }
        stage('Deploy to EKS') {
            steps {
                echo 'Deploying to EKS...'
                sh 'kubectl apply -f eks/deployment.yaml -n $NAMESPACE'
                
                // Wait until pods are up and running
                echo 'Waiting for pods to be in a running state...'
                sleep(time: 10, unit: 'SECONDS')
            }
        }
        stage('Verify App Deployment') {
            steps {
                // Check deployment status
                sh 'kubectl get pods'
                sh 'kubectl get svc'
            }
        }
        
        stage('Verify Tag Deployment') {
            steps {
                echo 'Verifying the deployed image tag...'
                
                // Get the current image running in the deployment
                script {
                    def deployedImage = sh(
                        script: "kubectl get deployment node-deployment -n $NAMESPACE -o=jsonpath='{.spec.template.spec.containers[0].image}'",
                        returnStdout: true
                    ).trim()
                    
                    echo "Deployed Image: ${deployedImage}"
                    
                    // Check if the deployed image matches the expected IMAGE_TAG
                    if (deployedImage == "${IMAGE_TAG}") {
                        echo "Deployment verification successful: Correct image tag ${IMAGE_TAG} is deployed."
                    } else {
                        error "Deployment verification failed: Expected ${IMAGE_TAG}, but found ${deployedImage}."
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up local images...'
            sh 'docker rmi $IMAGE_TAG || true'
        }
    }
}

