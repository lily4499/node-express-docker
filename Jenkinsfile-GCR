pipeline {
    agent any
    
    options {
        timeout(time: 10, unit: 'MINUTES')
    }
    
    environment {
        PROJECT_ID = "lili-devops"
        IMAGE_NAME = "node-express-app"
        REPOSITORY_NAME = "lili-gcr-repo"
        REGISTRY_URL = "gcr.io"
    }
    
    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/lily4499/node-express-docker-backup.git'
            }
        }
        
        stage('Build Docker image') {
            steps {
                script {
                    sh "docker build -t gcr.io/${PROJECT_ID}/${REPOSITORY_NAME}/${IMAGE_NAME}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Trivy Scan (Aqua)') {
            steps {
                sh 'trivy image gcr.io/${PROJECT_ID}/${REPOSITORY_NAME}/${IMAGE_NAME}:${BUILD_NUMBER}'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    //docker.build("${GCR_REGION}/${PROJECT_ID}/${IMAGE_NAME}:${env.BUILD_NUMBER}")
                    docker.withRegistry("https://${REGISTRY_URL}", 'gcr:lili-gcp-service-account-key-json') {
                        docker.image("${GCR_REGION}/${PROJECT_ID}/${IMAGE_NAME}:${env.BUILD_NUMBER}").push()
                    }
                }
            }
        }
      
    //   stage('Push Docker image to GCR') {
     //       steps {
     //           withCredentials([usernamePassword(credentialsId: 'lili-gcp-service-account-passwd', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
     //               script {
      //                  def dockerRegistry = "https://${REGISTRY_URL}"
      //                  sh "echo \$PASSWORD | docker login -u \$USERNAME --password-stdin ${dockerRegistry}"
       //                 sh "docker push ${dockerRegistry}/${PROJECT_ID}/${REPOSITORY_NAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
       //             }
      //          }
     //       }
      //  }
      
    }
}
