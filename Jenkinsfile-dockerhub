pipeline {
    agent any 

    options {
        timeout(time: 10, unit: 'MINUTES')
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('lily-docker-credentials')
        APP_NAME = "laly9999/node-express-app"
    }

    stages { 
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/lily4499/node-express-docker.git'
            }
        }
        
        stage('Run Sonarqube') {
            environment {
                scannerHome = tool 'ibt-sonarqube';
            }
            steps {
                withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                    sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=may17_cohort"
                }
            }
        }
        
        stage('Build docker image') {
            steps {  
                sh 'docker build -t $APP_NAME:$BUILD_NUMBER .'
            }
        }
        
        stage('login to dockerhub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }
        
        stage('Trivy Scan (Aqua)') {
            steps {
                sh 'trivy image $APP_NAME:$BUILD_NUMBER'
            }
        }
        
        stage('push image') {
            steps {
                sh 'docker push $APP_NAME:$BUILD_NUMBER'
            }
        }

         stage('Trigger ManifestUpdate') {
             steps{
                build job: 'node-express-manifest', parameters: [string(name: 'IMAGE_TAG', value: env.BUILD_NUMBER)]     

            }         
        }        
    }

    post {
        success {
            // This block will execute if the build is successful
            script {
                currentBuild.result = 'SUCCESS' // Set the build result to success
                echo 'Congratulations! The build was successful.'
                // You can also send an email or perform other actions here
            }
        }
        
        failure {
            // This block will execute if the build fails
            script {
                currentBuild.result = 'FAILURE' // Set the build result to failure
                echo 'The build has failed.'
                // You can also send an email or perform other actions here
            }
        }
        
        always {
            // This block will always execute regardless of the build result
            echo 'End of Jenkins pipeline execution.'
            // You can perform cleanup or other actions here
        }
    }
    
}

