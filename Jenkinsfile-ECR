pipeline {
    agent any
    options {
        timeout(time: 20, unit: 'MINUTES')
    }

    environment {
        AWS_REGION      = 'us-east-1'  // Replace with your AWS region
        REPOSITORY_NAME = 'node-express-app'      // Replace with your ECR registry 
        URL_REGISTRY    = '637423529262.dkr.ecr.us-east-1.amazonaws.com'  //URL (e.g., <account_id>.dkr.ecr.<region>.amazonaws.com)
     //   IMAGE_NAME = ''          // Replace with your image name
      
    }
    stages{
       stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/lily4499/node-express-docker.git'
            }
        }
        // run sonarqube test
        stage('Run Sonarqube') {
            environment {
                scannerHome = tool 'ibt-sonarqube';
            }
            steps {
              withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=may17_cohort"
              }
            }
        }
        stage('build Docker image') {
            steps {
                script {
                    // build image
                    docker.build("${URL_REGISTRY}/${REPOSITORY_NAME}:$BUILD_NUMBER")
                }
            }
        }
        stage('Trivy Scan (Aqua)') {
            steps {
                sh 'trivy image --format template --output trivy_report.html ${URL_REGISTRY}/${REPOSITORY_NAME}:$BUILD_NUMBER'
            }
       }
        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'lil-ecr-credentials-id', usernameVariable: 'AWS_ECR_ACCESS_KEY_ID', passwordVariable: 'AWS_ECR_SECRET_ACCESS_KEY')]) {
                        def login = sh(script: "aws ecr get-login-password --region ${AWS_REGION}", returnStdout: true).trim()
			//To allow Jenkins to log in to the Docker registry using AWS credentials.
                        sh "echo ${login} | docker login --username AWS --password-stdin ${URL_REGISTRY}"
                
                        def customImage = docker.build("${URL_REGISTRY}/${REPOSITORY_NAME}:$BUILD_NUMBER")
                        customImage.push()
                    }
                }
            }
        }
        
    }
}

